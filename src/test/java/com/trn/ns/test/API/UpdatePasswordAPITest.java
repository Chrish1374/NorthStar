package com.trn.ns.test.API;
import java.sql.SQLException;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import com.relevantcodes.extentreports.ExtentTest;
import com.trn.ns.page.API.factory.RESTUtil;
import com.trn.ns.page.constants.LoginPageConstants;
import com.trn.ns.page.constants.OrthancAndAPIConstants;
import com.trn.ns.page.constants.URLConstants;
import com.trn.ns.page.factory.DatabaseMethods;
import com.trn.ns.page.factory.Header;
import com.trn.ns.page.factory.LoginPage;
import com.trn.ns.page.factory.PatientListPage;
import com.trn.ns.page.factory.RegisterUserPage;
import com.trn.ns.page.factory.UsersPage;
import com.trn.ns.test.base.TestBase;
import com.trn.ns.test.configs.Configurations;
import com.trn.ns.utilities.ExtentManager;

@Listeners(com.trn.ns.test.listeners.ItestCustomListener.class)
public class UpdatePasswordAPITest extends TestBase{

	String protocolName;
	private LoginPage loginPage;
	private ExtentTest extentTest;
	private DatabaseMethods db;
	private PatientListPage patientPage;
	private Header header;
	private UsersPage userPage;
	
	String username=Configurations.TEST_PROPERTIES.get("nsUserName");
	String password=Configurations.TEST_PROPERTIES.get("nsPassword");
	
	String user="user";
	String userOne="usera";
	String userTwo="userb";
	String userThree="userc";
	String newUserTwo="newusertwo";
	String emailAddress="@xyz.com";
	String encryptedPassword="SKJtcVzYzAkTHMZmHnTvZt0rnBUCA5fHH65o%2FVfG6nOu%2FU%2Ble5skvPFStgrMJftYKcDjNgFLnj2%2F7Js2Q0HD%2BoZRTC2yg19F5um1PwJXsKFfdRIuCcNUfcOOta1hWbu8JU6nCbLI5OQE2%2FCfAzZZ0%2FXlUkS3pd4WGIZov1HuO4o%3D%3A%3A%3AYbK79BxYWFCpsk4C5iuLpw%3D%3D";
	   
	
	//US1522: Create new API for adding a user using token and changing password
	@Test(groups ={"Chrome", "IE11", "Edge","US1522", "Positive"})
    public void test01_US1522_TC8129_VerifyAdminUserOnlyChangeUsersPassword() throws SQLException, InterruptedException  {
		
		extentTest = ExtentManager.getTestInstance();
		extentTest.setDescription("Verify that only a remote system admin user is able change a user's password via an API (POSTMAN) .");
		
		loginPage = new LoginPage(driver);
		db=new DatabaseMethods(driver);
		db.updateUserDetails(LoginPageConstants.FIRST_NAME,LoginPageConstants.LAST_NAME,username);	  
		
		loginPage.navigateToBaseURL();
		loginPage.login(username, password);
		patientPage = new PatientListPage(driver); 
		header = new Header(driver);
		header.assertEquals(header.getText(header.userInfo),LoginPageConstants.FIRST_NAME+" "+LoginPageConstants.LAST_NAME,"Checkpoint[1/8]", "Verifying user Info on header as -"+header.getText(header.userInfo));
		
		//verify first user is admin user.
		DatabaseMethods db = new DatabaseMethods(driver);
		loginPage.assertTrue(db.verifyUserIsAdminUser(username), "Checkpoint[2/8]", "Verified that "+username+" user is admin user.");
		
		//add 3 new user from register page
		loginPage.navigateToURL(URLConstants.BASE_URL+URLConstants.REGISTER_PAGE_URL);
	    RegisterUserPage rsp = new RegisterUserPage(driver);
	    for(char letter = 'a'; letter <='c'; letter++ )
	    	rsp.createNewUser(user+letter, user+letter, user+letter+emailAddress ,user+letter,user+letter,user+letter);
	   
	    //verify newly added user are admin user or not
	    ExtentManager.customExtentReportLog(Configurations.INFO, extentTest, "", "Verify newly added user are not admin users.");
	    for(char letter = 'a'; letter <='c'; letter++ )
	    loginPage.assertFalse(db.verifyUserIsAdminUser(user+letter), "Checkpoint[3."+letter+"/8]", "Verified that "+(user+letter)+" is not admin user.");
	  
	    //Update password for usertwo using token generated by Admin user
	    LinkedHashMap<String, String> hm=new LinkedHashMap<String,String>();  
	    hm.put(LoginPageConstants.USERNAME, userTwo);
	    hm.put(LoginPageConstants.PASSWORD,encryptedPassword);
	    hm.put(OrthancAndAPIConstants.UPDATE_FIELD_TYPE,"1");
	    
	    //get token value and update the password
	    Map<String, String> keyVal = RESTUtil.getTokenWithKey(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.TOKEN_URL,username,password,OrthancAndAPIConstants.HEADER_KEY);
	    List<Object> response =RESTUtil.putAPIMethod(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.UPDATE_USER_URL,keyVal, hm);
	    loginPage.assertEquals(response.get(0).toString(),OrthancAndAPIConstants.SUCCESS_API_CODE,"Checkpoint[4/8]","Verified status code 200 is received after updating the password for usertwo using admin user.");
	    
	    
	    ExtentManager.customExtentReportLog(Configurations.INFO, extentTest, "", "Verify user not able to login using existing credentials for usertwo");
	    loginPage.navigateToBaseURL();
	    loginPage.login(userTwo, userTwo);
	    loginPage.waitForTimePeriod(2000);
		loginPage.assertEquals(loginPage.getText(loginPage.loginFailedErrorMsg),LoginPageConstants.LOGINFAILUREERRORMESSAGE,"Checkpoint[5/8]", loginPage.getCurrentPageURL()+" is displaying after using existing password for usertwo.");
	    
		ExtentManager.customExtentReportLog(Configurations.INFO, extentTest, "", "Verify user able to login using new credentials for usertwo");
	    loginPage.login(userTwo, newUserTwo);
		patientPage.waitForPatientPageToLoad();
		patientPage.assertTrue(patientPage.getCurrentPageURL().contains(URLConstants.PATIENT_LIST_URL), "Checkpoint[6/8]", "Verified that user able to login using new password for usertwo.s");
		
		//get token using userTwo (which is non-admin user)
		ExtentManager.customExtentReportLog(Configurations.INFO, extentTest, "", "Verify non admin user can update the password for others users");
		hm.put(LoginPageConstants.USERNAME, userThree);
		hm.put(LoginPageConstants.PASSWORD, "MsMDHGDrtXirS%2BrpCarEccwfP4GsHtL6puKyxreWn%2FNj9tRM1FMULCNZdk3ilUaHkl%2BOyM2%2BWwy0gw6vcHPGrU1VWV0fYfbzZAw7LZPaeFNnPSCfAHjzqSA5mjrqtg3mM%2B%2FkyRS%2Fw5Nabxn01AaUYnMbOwvLjCT%2FUjaH0XQeNiY%3D%3A%3A%3AuvvnWsM3gQgp%2BCxAI3jqtQ%3D%3D");
		hm.put(OrthancAndAPIConstants.UPDATE_FIELD_TYPE,"1");
		
	    //get token value
	    keyVal = RESTUtil.getTokenWithKey(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.TOKEN_URL,userTwo,newUserTwo,OrthancAndAPIConstants.HEADER_KEY);
	    response =RESTUtil.putAPIMethod(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.UPDATE_USER_URL,keyVal, hm);
	    loginPage.assertEquals(response.get(0).toString(),OrthancAndAPIConstants.UNAUTHORIZED_API_CODE,"Checkpoint[7/8]","Verified status code 401 is received after update password from API.");
	   
	    loginPage.navigateToBaseURL();
	    loginPage.login(userThree, userThree);
	    patientPage.waitForPatientPageToLoad();
	    patientPage.assertTrue(patientPage.getCurrentPageURL().contains(URLConstants.PATIENT_LIST_URL), "Checkpoint[8/8]", "Verified that userthree can login into application using existing password only.");
	
	}

	@Test(groups ={"Chrome", "IE11", "Edge","US1522", "Negative"})
    public void test02_US1522_TC8140_VerifyErrorMessageWhenUsernameIsEmpty() {
		
		extentTest = ExtentManager.getTestInstance();
		extentTest.setDescription("Verification of Admin change of Password with empty username .");
		
		loginPage = new LoginPage(driver);
	
	    //Update password with username field is empty using token generated by Admin user
		LinkedHashMap<String, String> hm=new LinkedHashMap<String,String>();  
		hm.put(LoginPageConstants.USERNAME, "");
		hm.put(LoginPageConstants.PASSWORD, encryptedPassword);
		hm.put(OrthancAndAPIConstants.UPDATE_FIELD_TYPE,"1");
		
	    //get token value and update the password
	    Map<String, String> keyVal = RESTUtil.getTokenWithKey(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.TOKEN_URL,username,password,OrthancAndAPIConstants.HEADER_KEY);
	    List<Object> response =RESTUtil.putAPIMethod(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.UPDATE_USER_URL,keyVal, hm);
	    loginPage.assertEquals(response.get(0).toString(),OrthancAndAPIConstants.STATUS_CODE_400,"Checkpoint[1/2]","Verified status code 400 is received when username is empty.");
	    loginPage.assertTrue(loginPage.containsIgnoreCase(response.get(1).toString(),OrthancAndAPIConstants.ERROR_MESSAGE_WHEN_USERNAME_NOT_PROVIDED),"Checkpoint[2/2]","Verified error message when admin user tried to update password with empty username.");

	}
	
	@Test(groups ={"Chrome", "IE11", "Edge","US1522", "Negative"})
    public void test03_US1522_TC8141_VerifyErrorMessageWhenUsernameNotExistInDB(){
		
		extentTest = ExtentManager.getTestInstance();
		extentTest.setDescription("Verification of Admin change of Password for user who doesn't exist in NSDB via an API (POSTMAN) .");
		
		loginPage = new LoginPage(driver);
	
	    //Update password with username field is empty using token generated by Admin user
		LinkedHashMap<String, String> hm=new LinkedHashMap<String,String>();  
		hm.put(LoginPageConstants.USERNAME, userTwo);
		hm.put(LoginPageConstants.PASSWORD, encryptedPassword);
		hm.put(OrthancAndAPIConstants.UPDATE_FIELD_TYPE,"1");
		
	    //get token value and update the password
	    Map<String, String> keyVal = RESTUtil.getTokenWithKey(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.TOKEN_URL,username,password,OrthancAndAPIConstants.HEADER_KEY);
	    List<Object> response =RESTUtil.putAPIMethod(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.UPDATE_USER_URL,keyVal, hm);
	    loginPage.assertEquals(response.get(0).toString(),OrthancAndAPIConstants.STATUS_CODE_400,"Checkpoint[1/2]","Verified status code 400 is received when user is not created");
	    loginPage.assertTrue(loginPage.containsIgnoreCase(response.get(1).toString(),OrthancAndAPIConstants.ERROR_MESSAGE_WHEN_USERNAME_NOT_CREATED),"Checkpoint[2/2]","Verified error message when admin user tried to update password for the non created user.");

	}
	
	@Test(groups ={"Chrome", "IE11", "Edge","US1522", "Negative"})
    public void test04_US1522_TC8142_VerifyErrorMessageWhenLengthOfPasswordIsMore() {
		
		extentTest = ExtentManager.getTestInstance();
		extentTest.setDescription("Verification of Admin change of Password for user who has Password with more than 32 characters via an API (POSTMAN) .");
		
		loginPage = new LoginPage(driver);
		loginPage.navigateToBaseURL();
		loginPage.login(username, password);
		patientPage = new PatientListPage(driver); 
		
		loginPage.navigateToURL(URLConstants.BASE_URL+URLConstants.REGISTER_PAGE_URL);
	    RegisterUserPage rsp = new RegisterUserPage(driver);
	    rsp.createNewUser(userTwo, userTwo, userTwo+emailAddress ,userTwo,userTwo,userTwo);
	
	    //Update password with username field is empty using token generated by Admin user
		LinkedHashMap<String, String> hm=new LinkedHashMap<String,String>();  
		hm.put(LoginPageConstants.USERNAME, userTwo);
		hm.put(LoginPageConstants.PASSWORD, "btDtXB80dJi1shBVVDrepYs1%2FizUrqaieUvE0zxTipb6HKNO637glFI%2B7mnIp800woslNrd0JiNyV51l4ChBDVx37d%2FTBtmefiMQexSwBItv1E%2FOuN84nXZZyfr2BrnmxIuSAN3OV1Y9o2Dcai%2BiZEOPxD82fOBJJnLQbAzLsVc%3D%3A%3A%3A%2FjqLOfGgr6n3EToGf2v1MYA4bffArbfS7p6mXVsHcyuFNSdCXyry0%2BssoF7R%2BhJ164zUcDEHmS%2FMaT4CjFmUNSZxZ76YEMHI2g2hgZd6niKBzmF%2Fw2%2BmrVwqKzN9y3GGoIlshPrvnY6F%2BBZiZm1Rdu3gUl2v%2BrepbhwLy4OmrOQ%3D");
		hm.put(OrthancAndAPIConstants.UPDATE_FIELD_TYPE,"1");
		
	    //get token value and update the password
	    Map<String, String> keyVal = RESTUtil.getTokenWithKey(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.TOKEN_URL,username,password,OrthancAndAPIConstants.HEADER_KEY);
	    List<Object> response =RESTUtil.putAPIMethod(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.UPDATE_USER_URL,keyVal, hm);
	    loginPage.assertEquals(response.get(0).toString(),OrthancAndAPIConstants.STATUS_CODE_400,"Checkpoint[1/2]","Verified status code 400 is received when user is not created");
	    loginPage.assertTrue(loginPage.containsIgnoreCase(response.get(1).toString(),OrthancAndAPIConstants.ERROR_MESSAGE_WHEN_LENGTH_OF_PASSWORD_IS_MORE),"Checkpoint[2/2]","Verified error message when admin user tried to update password with more than 32 characters.");

	}
	
	@Test(groups ={"Chrome", "IE11", "Edge","US1522", "Negative"})
    public void test05_US1522_TC8143_VerifyErrorMessageWhenPasswordWithoutEncryption() {
		
		extentTest = ExtentManager.getTestInstance();
		extentTest.setDescription("Verification of Admin change of Password for user without encryption via an API (POSTMAN) .");
		
		loginPage = new LoginPage(driver);
		loginPage.navigateToBaseURL();
		loginPage.login(username, password);
		patientPage = new PatientListPage(driver); 
		
		loginPage.navigateToURL(URLConstants.BASE_URL+URLConstants.REGISTER_PAGE_URL);
	    RegisterUserPage rsp = new RegisterUserPage(driver);
	    rsp.createNewUser(userTwo, userTwo, userTwo+emailAddress ,userTwo,userTwo,userTwo);
	
	    //Update password with username field is empty using token generated by Admin user
		LinkedHashMap<String, String> hm=new LinkedHashMap<String,String>(); 
		hm.put(LoginPageConstants.USERNAME, userTwo);
		hm.put(LoginPageConstants.PASSWORD, userThree);
		hm.put(OrthancAndAPIConstants.UPDATE_FIELD_TYPE,"1");
		
	    //get token value and update the password
	    Map<String, String> keyVal = RESTUtil.getTokenWithKey(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.TOKEN_URL,username,password,OrthancAndAPIConstants.HEADER_KEY);
	    List<Object> response =RESTUtil.putAPIMethod(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.UPDATE_USER_URL,keyVal, hm);
	    loginPage.assertEquals(response.get(0).toString(),OrthancAndAPIConstants.STATUS_CODE_400,"Checkpoint[1/2]","Verified status code 400 is received when password is not encypted");
	    loginPage.assertTrue(loginPage.containsIgnoreCase(response.get(1).toString(),OrthancAndAPIConstants.ERROR_MESSAGE_WHEN_LENGTH_OF_PASSWORD_IS_MORE),"Checkpoint[2/2]","Verified error message when admin user tried to update password without encryption");

	}
	
	@Test(groups ={"Chrome", "IE11", "Edge","US1522", "Negative"})
    public void test06_US1522_TC8144_VerifyAdminAccessToCreateNewUserUsingAPI() throws SQLException {
		
		extentTest = ExtentManager.getTestInstance();
		extentTest.setDescription("Verification of Admin access adding new user via an API (POSTMAN) .");
		
		loginPage = new LoginPage(driver);
		loginPage.navigateToBaseURL();
		loginPage.login(username, password);
		patientPage = new PatientListPage(driver); 
		db=new DatabaseMethods(driver);
	
	   //create new user through postman
		LinkedHashMap<String, String> hm=new LinkedHashMap<String,String>(); 
		hm.put((LoginPageConstants.FIRST_NAME).toLowerCase(), userTwo);
		hm.put((LoginPageConstants.LAST_NAME).toLowerCase(), userTwo);
	    hm.put(LoginPageConstants.EMAIL, userTwo+emailAddress);
	    hm.put(LoginPageConstants.USERNAME, userTwo);
	    hm.put(LoginPageConstants.PASSWORD, encryptedPassword);
	    hm.put(LoginPageConstants.CONFIRM_PASSWORD,encryptedPassword);
	   
	    //get token value and create new user
	    Map<String, String> keyVal = RESTUtil.getTokenWithKey(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.TOKEN_URL,username,password,OrthancAndAPIConstants.HEADER_KEY);
	    List<Object> response =RESTUtil.postAPIMethod(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.CREATE_USER_API,keyVal, hm);
	    loginPage.assertEquals(response.get(0).toString(),OrthancAndAPIConstants.SUCCESS_API_CODE,"Checkpoint[1/4]","Verified status code 200 is received after creating new user.");
	    
	    loginPage.assertFalse(db.verifyUserIsAdminUser(userTwo), "Checkpoint[2/4]", "Verified that "+userTwo+" is not admin user.");
	    //navigate to user page and verify newly created user through postman
	    loginPage.navigateToURL(URLConstants.BASE_URL+URLConstants.USER_PAGE_URL);
	    userPage = new UsersPage(driver);
	    loginPage.assertTrue(userPage.getListOfAllUsers().contains(userTwo), "Checkpoint[3/4]", "Verifying newly created user (by admin user) is present on users page");	
	    
	    //check new user can login into application or not
	    loginPage.navigateToBaseURL();
	    loginPage.login(userTwo, newUserTwo);
		patientPage.waitForPatientPageToLoad();
		patientPage.assertTrue(patientPage.getCurrentPageURL().contains(URLConstants.PATIENT_LIST_URL), "Checkpoint[4/4]", "Verified that newly created user can login into application.");
			

	}
	
	@Test(groups ={"Chrome", "IE11", "Edge","US1522", "Negative"})
    public void test07_US1522_TC8145_VerifyNonAdminAccessToCreateNewUserUsingAPI() throws SQLException, InterruptedException {
		
		extentTest = ExtentManager.getTestInstance();
		extentTest.setDescription("Verification of User with no admin access adding new user via an API (POSTMAN).");
		
		loginPage = new LoginPage(driver);
		loginPage.navigateToBaseURL();
		loginPage.login(username, password);
		patientPage = new PatientListPage(driver); 
		db=new DatabaseMethods(driver);
		
		//create non admin user 
		loginPage.navigateToURL(URLConstants.BASE_URL+URLConstants.REGISTER_PAGE_URL);
	    RegisterUserPage rsp = new RegisterUserPage(driver);
	    rsp.createNewUser(userTwo, userTwo, userTwo+emailAddress ,userTwo,userTwo,userTwo);
	    loginPage.assertFalse(db.verifyUserIsAdminUser(userTwo), "Checkpoint[1/4]", "Verified that "+userTwo+" is not admin user.");
	
	   //create new user through postman using non admin credentials
	    LinkedHashMap<String, String> hm=new LinkedHashMap<String,String>(); 
	    hm.put((LoginPageConstants.FIRST_NAME).toLowerCase(), userThree);
	    hm.put((LoginPageConstants.LAST_NAME).toLowerCase(), userThree);
	    hm.put(LoginPageConstants.EMAIL, userThree+emailAddress);
	    hm.put(LoginPageConstants.USERNAME, userThree);
	    hm.put(LoginPageConstants.PASSWORD, encryptedPassword);
	    hm.put(LoginPageConstants.CONFIRM_PASSWORD,encryptedPassword);
	   
	    //get token value and create new user
	    Map<String, String> keyVal = RESTUtil.getTokenWithKey(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.TOKEN_URL,userTwo,userTwo,OrthancAndAPIConstants.HEADER_KEY);
	    List<Object> response =RESTUtil.postAPIMethod(OrthancAndAPIConstants.API_BASE_URL,OrthancAndAPIConstants.CREATE_USER_API,keyVal, hm);
	    loginPage.assertEquals(response.get(0).toString(),OrthancAndAPIConstants.UNAUTHORIZED_API_CODE,"Checkpoint[2/4]","Verified status code 401 is received when non admin user tried to creating new user.");
	    
	    //navigate to user page and verify newly created user through postman
	    loginPage.navigateToURL(URLConstants.BASE_URL+URLConstants.USER_PAGE_URL);
	    userPage = new UsersPage(driver);
	    loginPage.assertFalse(userPage.getListOfAllUsers().contains(userThree), "Checkpoint[3/4]", "Verifying no new user added on user list page.");	
	    
	    //check new user can login into application or not
	    loginPage.navigateToBaseURL();
	    loginPage.login(userTwo, newUserTwo);
	    loginPage.waitForElementVisibility(loginPage.loginFailedErrorMsg);
	    loginPage.assertEquals(loginPage.getText(loginPage.loginFailedErrorMsg),LoginPageConstants.LOGINFAILUREERRORMESSAGE,"Checkpoint[4/4]","Verified that new user is not created using non admin credential user.");
			

	}

	@AfterMethod(alwaysRun=true)
	public void updateDB() throws SQLException {
		DatabaseMethods db = new DatabaseMethods(driver);
		db.deleteAllUsers(username);
	}	

	


}
